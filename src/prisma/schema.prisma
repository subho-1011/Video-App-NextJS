generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  createAt      DateTime? @default(now())

  accounts   Account[]
  sessions   Session[]
  videos     Video[]
  likes      Like[]
  comments   Comment[]
  communitys Community[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verificationtokens")
}

model ResetPasswordToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("resetpasswordtokens")
}

model Video {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId     String   @db.ObjectId
  title       String
  slug        String
  description String?
  tags        String[]
  thumbnail   String
  videoUrl    String
  views       Int?
  duration    Float?
  isPublished Boolean  @default(true)
  createAt    DateTime @default(now())
  updataAt    DateTime @updatedAt

  likes    Like[]
  comments Comment[]

  owner User @relation(fields: [ownerId], references: [id])

  @@map("videos")
}

model Like {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId     String   @db.ObjectId
  videoId     String?  @db.ObjectId
  commentId   String?  @db.ObjectId
  communityId String?  @db.ObjectId
  createAt    DateTime @default(now())

  owner     User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  video     Video?     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  comment   Comment?   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  community Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId     String   @db.ObjectId
  videoId     String?  @db.ObjectId
  commentId   String?  @db.ObjectId
  communityId String?  @db.ObjectId
  createAt    DateTime @default(now())

  like Like[]

  owner     User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  video     Video?     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  community Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Community {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId  String   @db.ObjectId
  text     String?  @db.ObjectId
  imageUrl String?
  createAt DateTime @default(now())

  like    Like[]
  Comment Comment[]

  owner User @relation(fields: [ownerId], references: [id])

  @@map("communitys")
}

model Subscription {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  subscriberId          String?  @db.ObjectId
  channelToSubscribedId String?  @db.ObjectId
  createAt              DateTime @default(now())
  updateAt              DateTime

  @@map("subscriptions")
}
